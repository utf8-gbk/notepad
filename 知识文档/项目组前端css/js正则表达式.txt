1.有两种方法实列化RegExp对象
字面量 var reg = /\bis\b/g
构造函数 var reg = new RegExp('\\bis\\b','g')

2.修饰符
g：global全文搜索,不添加，搜索到第一个匹配停止
i：ignore case忽略大小写，默认大小写敏感
m:multiple lines多行搜索
lastIndex:是当前表达式匹配内容的最后一个字符的下一个位置
source:正则表达式的文本字符串 不计标志位/gim



元字符
原义文本字符
元字符：元字符是在正则表达式中有特殊含义的非字母字符

3.字符类
[]构建一个简单的类，符合某些特性的对象，一个泛指
[abc]one of abc
字符类取反
[^abc]表示不是字符a或b或c的内容

4.范围类
[a-zA-Z-]
匹配所有大小写和-

5.预定义类
. [^\r\n]
\d [0-9]
\D [^0-9]
\s [\t\n\x0B\f\r]
\S [^\t\n\x0B\f\r]
\w [a-zA-Z_0-9]
\W [^a-zA-Z_0-9]

6.边界
^ 以XXX开始
$ 以XXX结束
\b 单词边界
\B 非单词边界

7.量词 作用于紧挨着他的字母不是整个单词
? 出现0次或一次
+ 出现一次或多次
* 出现0次或多出
{n} 出现n次
{n,m} 出现n到m次
{n,} 至少出现n次
{0,n} 最多出现n次

8.贪婪模式
默认贪婪模式最多匹配
非贪婪模式
在量词后面加上？最少匹配

9.分组
()分组的内容
或|   ex(av|cd)per
多个分支走任意一个分支都可以
反向引用
'2015-12-25'.replace(/(\d{4})-(\d{2})-(\d{2})/g,'$1$2$3') $捕获分组内容
忽略分子：不希望捕获某些分组，只需要在分组内加上？：

10.前瞻
正向前瞻exp(?=assert)
负向前瞻exp(?!assert)

正向后顾exp(?<=assert) js不支持
负向后顾exp(?<!assert) js不支持

11.test方法和exec方法
RegExp.prototype.test(str)
用于测试字符串参数中是否存在匹配正则表达式模式的字符
RegExp.prototype.exec(str)
使用正则表达式模式对字符串执行搜索，并将更新全局RegExp对象的属性以反映匹配的结果
如果没有匹配的文本则返回null，否则返回一个结果数组
index：声明匹配文本的第一个字符的位置
input：存放被检索的字符串string

非全局\全局调用返回的数组 非全局下lastIndex不生效
第一个元素是与正则表达式相匹配的文本
第二个元素是与RegExpObject的第一个子表达式相匹配的文本（分组）
第二个元素是与RegExpObject的第二个子表达式相匹配的文本（分组），以此类推
var reg4 = /\d(\w)(\w)\d/g;
while(ret = reg4.exec(ts)){
console.log(reg4.lastIndex+'\t'+ret.index+'\t'+ret.toString());
非全局下lastIndex不生效
index第一次匹配的到的索引，全局每次都会变

12.字符串对象方法
search()方法用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串
方法返回第一个匹配结果index，查找不到返回-1
search()方法不执行全局匹配，它将忽略标志g，并且总是从字符串的开始进行检索
match()方法将检索字符串，以找到一个或多个与regexp匹配的文本
regexp是否具有标志g对结果影响很大
非全局跟exec一致 全局只返回匹配的字符
split()方法把字符串分割为字符数组
replace() 第一个参数找谁第二个参数替换成谁
replace(str,replaceStr)
replace(reg,replaceStr)
replace(reg,function)
function会在每次匹配替换的时候调用，有四个参数
1.匹配字符串
2.正则表达式分组内容，没有分组则没有该参数
3.匹配项在字符串中的index
4.原字符串