1.基本数据类型
js不需要指定类型
var num = 32;
num = "this is a string"; 弱类型特性
32+32 = 64
"32"+32 ="3232" 字符串拼接
"32"-32=0 数字运算
技巧
一个变量想转换为number类型 num-0或+num
一个变量想转换为string类型 num+“”

2.==与===
“1.23”==1.23
0==false
null == undefined
new Object() ==new Object()
[1,2] = [1,2]
===
类型不同，返回false
类型相同：
null === null
undefined === undefined
NaN =/ NaN
new Object =/ new Object
==
null == undefined
number == string转number
number == boolean转number
number|string ==object转基本类型

3.js值类型和引用类型
（1）值类型：数值、布尔值、null、undefined。
function chainStore() 
{ 
var store1='Nike China'; 
var store2=store1; 
store1='Nike U.S.A.'; 
alert(store2); //Nike China 
} 
chainStore(); 
//把一个值类型（也可以叫基本类型）store2传递给另一个变量（赋值）时，其实是分配了一块新的内存空间，因此改变store1的值对store2没有任何影响，因为它不像引用类型，变量的交换其实是交换了指像同一个内容的地址。
（2）引用类型：对象、数组、函数。
function chainStore() 
{ 
var store1=['Nike China']; 
var store2=store1; 
alert(store2[0]); //Nike China 
store1[0]='Nike U.S.A.'; 
alert(store2[0]); //Nike U.S.A. 
} 
chainStore(); 
//在上面的代码中，store2只进行了一次赋值，理论上它的值已定，但后面通过改写store1的值，发现store2的值也发生了改变，这正是引用类型的特征，也是我们要注意的地方。

4.包装类型
string/number/boolean三个基本类型有对应包装类型
，在把这几个基本类型当作对象使用时，、
js会创建一个对应的临时包装对象，然后进行操作，操作完毕后会消除临时对象，
基本类型依然时基本类型，并无变化。

5.类型检测
typeof 返回一个字符串
适合函数对象和基本类型的判断
比较特殊的
typeof null ===“object”

obj instanceof Object
判断对象类型，基于原型链的判断操作符
obj为一个对象 Object函数对象，函数构造器
原理：左操作数这个对象的原型链上是否有右边这个构造函数的prototype属性

Object.prototype.toString.call();
判断所有对象，IE6，7，8null,undefined 会返回object

6.表达式
原始表达式 常量、直接量 3.14，“test”
	 关键字 null ，this， true
	 变量 i,k,j
复合表达式 10*20 
数组、对象的初始化表达式
[1,2]  new Array(1,2);
{x:1,y:2} var o=new Object(); o.x = 1;o.y=2;
函数表达式
var fe = function(){};
属性访问表达式
var o ={x:1};
o.x o['x']
调用表达式
func();
对象创建表达式
new Func(1,2);
new Object;

7.运算符 
一元 +num
二元 a+b
三元 c?a:b
赋值 x+=1
比较 a==b
算术 a-b
位    a|b
逻辑 a&&b
字符串 "a"+"b"
特殊 delete obj.x
条件运算符 c?a:b
逗号运算符 var val=(1,2,3)://值取最右边的
delete运算符 删除对象上的属性
var obj={x:1};
delete obj.x
obj.x//undefined
in 运算符 判断对象上有这个key(值）没
typeof instanceof 类型判断运算符
new运算符 创建一个新的对象，创造一个构造器的实例
this运算符 
void运算符 void 0//undefined void(0) undefined不管后面的操作数是多少都返回undefined

8js中的语句
块语句 {}；
var语句 var a=b=1; a为局部变量，b为全局变量
try catch语句
try如果抛出异常catch执行
如果没有抛出异常catch不执行
最后finally都要执行

9.for...in
1.顺序不确定
2.enumerable为false时不会出现
3.for in对象属性受原型链影响

严格模式
1.不能使用with
2.不允许未声明的变量被赋值
3.arguments变为参数的静态副本 外面参数不会影响argumentds 修改对象的属性会影响
4.delete参数、函数名报错
5.delete不可配置的属性报错
6.对象字面量重复属性名报错
7.禁止八进制字面量
8.eval，arguments 变为关键字，不能作为变量和函数名
9.eval独立作用域