1.计算机的功能性和可编程性
功能性：对数据的操作，数据计算，输入输出处理和结果存储
可编程性：根据指令完成操作者的意图
2.计算机的发展是按照摩尔定律来发展的 表现为指数方式
3.4004 (2300)- spapc M7 (1百亿)- 32-core AMD（192亿）
4.编译和解释
5.编程语言的执行方式
源代码 (人类可读） 目标代码(专家可读）
编译：将原代码一次性转换成目标代码的过程（一次翻译后可以不需要源代码）
解释 将源代码逐条转换成目标代码同时逐条运行的过程（每次程序运行时随翻译执行需要源代码）
6.静态语言和脚本语言
静态语言：使用编译执行的编程语言 c/c++/java
编译器一次性生成目标代码，优化更充分程序运行速度更快
脚本语言：使用解释执行的编程语言 python/javaScript/PHP
执行程序时需要源代码，维护更灵活源代码在维护灵活、跨多个操作系统平台
7.IPO方法
I input 输入 ，程序的输入
P process处理，程序的主要逻辑（算法）
O output输出 ，程序的输出
8.求解计算问题的精简步骤
确定IPO
编写程序
调试程序
9.交互式和文件式
交互式：对每个输入语句即时运行结果，适合语法练习
文件式：批量执行一组语句并运行结果，编程的主要方式


10.程序的格式框架
代码高亮： 编程的色彩辅助体系，不是语法要求
缩进：一行代码开始前的空白区域，表达程序的格式框架
严格明确
所属关系
单一程序内缩进的长度相同
11.注释：用于提高代码可读性的辅助性文字，不被执行
#开头单行注释
...开头结尾 多行注释
12.变量：用来保存和表示数据的占位符号
13.命名：大小写，数字，下划线和汉字等字符及组合
大小写敏感 首字符不是数字 不与保留字相同
保留字：被编程语言内部定义并保留使用的标识符也叫关键字
变量采用标识符(名字)来表示，关联标识符的过程叫命名
14.数据类型：计算机程序理解的数据形式
字符串：有序  ""和''都可以
字符串的序号
正向递增序号（以0开始）和反向递减序号（以-1开始）
索引：返回字符串中单个字符
切片：返回字符串中的一段字符子串[:]
数字类型
整数：数学中的整数
浮点数：数学中的实数，带有小时部分
列表类型：由0个或多个数据组成的数据类型
列表使用[]表示，采用逗号，分隔各元素
使用保留字in判断一个元素是否在列表中
赋值语句：由赋值符号构成的一行代码

15.语句于函数
赋值语句：由赋值符号构成的一行代码
分支语句：由判断条件决定程序运行方向的语句 if elif else
每个保留字所在行最后存在一个冒号(:),语法的一部分
函数：<函数名>(<参数>) 根据输入参数产生不同输出的功能过程 类似数学y=f(x)

16.python程序的输入输出
input(<提示信息字符串>) 从控制台获得用户输入的函数
用户输入的信息以字符串类型保存在变量中 
print() 以字符形式向控制台输出结果的函数
print()函数的格式化
print("转换后的温度是{:.2f}C".format(c))
{} 表示槽，后续变量填充到槽中
{:.2f} 表示将变量C填充到这个位置时取小数点后2位
eval()评估函数 去掉参数最外侧引号并执行余下语句的函数

17.1946第一台计算机的诞生

18.计算机技术的演进过程
1946-1981 计算机系统结构时代 计算能力问题
1981-2008 网络和视窗时代 交互问题
2008-2016 复杂信息系统时代 数据问题
2017-         人工智能时代   人类问题

19.import保留字 引入一个绘图库turtle
20.Python计算生态 = 标志库+第三方库
标准库：随解释器直接安装到操作系统中的功能模块
21.第三方库：需要经过安装才能使用的功能模块
22.库Library、包Package、模块Module，统称模块
23.turtle的绘图窗体
turtle.setup(width,height,startx,starty)
setup()设置窗体大小及位置
4个参数中后两个可选
setup()不是必须的
24.turtle空间坐标体系
绝对坐标与海归坐标
绝对坐标
turtle.goto(x,y)
海归坐标
turtle.fd(d) 海归前进方向
turtle.bk(d)海归后退方向
turtle.circle(r,angle) 以海归当前位置左侧的一个点为圆心曲线运行
25.turtle角度坐标体系
绝对角度
turtle.seth(angel) 改变海龟行进方向不行进
海归角度
turtle.right(angle) 向右改变行进方向
turtle.left(angle) 向左改变行进方向

26.turtle.colormode(mode)
1.0:RGB小数值模式
255:RGB整数值模式
 
27.库引用：扩充python程序功能的方式
使用import保留字完成，采用<库名>.<函数名>(<函数参数>)的编码方式

28.form<库名>import<函数名>
from<库名>import*
<函数名>(<函数参数>)

29.import<库名>比较与form<库名>import<函数名>
第一种方法不会出现函数重名问题

30import更多用法
import<库名>as<库别名>
<库别名>.<函数名>(<函数参数>)
给调用的外部库关联一个更短，更适合自己的名字

31.turtle画笔控制函数
turtle.penup() 别名 turtle.pu()
turtle.pendown() 别名 turtle.pd()
画笔操作后一直有效，一般成对出现
turtle.pensize(width) 别名 turtle.width(width) 画笔的宽度
turtle.pencolor(color) 
color参数有三种方式
颜色字符串：turtle.pencolor("purple")
RGB的小数值：turtle.pencolor(r,g,b)
RGB的元组值：turtle.pencolor((r,g,b)) 
将小数或整数形成一个对立的元素用（）

32.turtle运动控制函数
turtle.forward(d) 别名 turtle.fd(d)
向前行进，海归走直线
-d：行进距离，可以为负数
turtle.circle(r,extent=None)
根据半径r绘制extent角度的弧形
-r：默认圆心在海归左侧r距离的位置 r可以为负数方向相反

33.turtle方向控制函数
turtle.setheading(angle) 别名 turtle.seth(angle)
改变绝对坐标系行进方向，海归走角度
turtle.left(angle) 海归左转
turtle.right(angle) 海归右转

34.循环语句
for<变量>in range(<函数名>)
range()函数
range(N)产生0到N-1的整数序列,共N个
range(M,N)产生M到N-1的整数序列，共N-M个

35.turtle.done()如果是文件式描写方法
文件不会退出，要手动关闭窗口
35.print("hello:",i) 
加，有空格

36整数类型 
pow(x,y)
可正可负，没有取值范围限制

37 4种进制的表现形式
十进制：1010
二进制：以0b或0B开头：0b010
八进制：以0o或0O开头：0o123
十六进制：以0x或0X开头：0x9a

38 浮点数间运算存在不确定尾数，近似无限范围
-round(x,d) ：对x四舍五入，d是小数截取位数

39 使用字母e或E作为幂的符号，以10为基数
<a>e<b> 表示 a*10的b次方

30复数类型
z.real 获得实部
z.imag 获得虚部

31数值预算操作符
x//y 整数除
x**y x的y次幂

32数值运算函数
abs(x) 绝对值
divmod(x,y) 商余(x//y,x%3)
pow(x,y[,z]) (x**y)%z 
round(x,[,d]) 四舍五入，d是保留小数位数，默认值为0
max(x1,x2,...,xn)
min(x1,x2,...xn)
int(x) 将x变为整数
float(12)将x变成浮点数，增加小数部分
complex(x) 将x变成复数，增加虚数部分

33字符串
字符串有2类4种表示方法
由一对单引号或双引号表示单行字符串
由一对三单引号或三双引号表示多行字符串

34希望字符中有单引号或双引号
(')" (')" (' ")'''

35字符串正向递增 反向递降

36切片的高级用法[M:N:K] M，N可以缺失 K表示步长

37字符串逆序 [::-1]

38转义符\" \b \n

39字符串操作符
x+y 连接两个字符串
n*x 复制n次字符串
x in s 如果x是s的子串 返回true

40字符串的处理函数
len(x) 返回字符串长度
str(x) 任意类型x所对应的字符串形式
hex(x) 或 oct(x) 整数x的16进制或8进制小写形式字符串
chr(u) u为Unicode编码 返回其对应的字符
ord(x) x为字符，返回其对应的Unicode编码

41 字符串处理方法
"方法"特指<a>.<b>()风格种的函数<b>()
str.lower() str.upper() 返回字符串的副本，全部字符串小写或大写
str.split(sep=None) 返回一个列表，由str根据sep被分个的部分组成
str.count(sub) 返回字符串sub在str种出现的次数
str.replace(old,new) 替换
str.center(width[,fillchar]) 字符串str根据宽度居中，filllchar来填充
str.strip(chars) 从str中去掉在其左侧和右侧chars中列出的字符串
str.join(iter) 在iter变量除最后一个元素外每个元素增加一个str

42.字符串类型的格式化
.format()方法
<模板字符串>.format(<逗号分隔的参数>) 槽加format
format()方法的格式
前三个：填充 对齐 宽度 "{0:=^20}".format("python")
后三个:  <,> <.精度> <类型> ,数字的千位分隔符 

43.time库是python中处理时间的标志库
time库包括三类函数
时间获取：time() ctime() gmtime()
时间格式化 ：strftime() strptime()
程序计时 ：sleep(),perf_counter()

44.time.time()获得当前时间戳 浮点型
time.ctime() 获取当前时间易读方式，返回字符串
time.gmtime()获取当前时间 计算机可处理格式
time.strftime(tpl,ts) tpl格式化模板字符串,用来自定义输出效果 ts是计算机内部时间类型变量
time.strptime(str,tpl) str是字符串的时间值 tpl是格式化模板字符串，用来定义输入效果
time.perf_counter() 返回一个cpu级别的精确时间秒,这个计数值起点不确定，连续调用差值才有意义
time.sleep(s)  程序休眠s秒

45.单分支结构
if<条件>:
  <语句块>
二分支结构
if<条件>:
  <语句块>
else:
  <语句块>
紧凑形式:适用于简单表达式的二分支结构
<表达式1> if <条件> else <表达式2>
多分支结构
if<条件>:
  <语句块1>
elif:
  <语句块2>
...
else:
  <语句块n>

46.条件操作符 和 条件保留字
< = > != ==  and or not

47.异常处理
异常处理的基本使用
try:
  <语句块1>
except:
  <语句块2>

try:
  <语句块1>
except:
  <语句块2>

异常处理的高级使用
try：
  <语句块1>
except:
  <语句块2>
else:
  <语句块3>
finally:
  <语句块4>
finally 对应语句块4一定执行
else对应语句块3在不发生异常时执行

48 计数循环（特定次数）
for i in range(M,N,k)： k是步长
字符串遍历循环
for c in s：
列表遍历
for item in ls：
文件遍历循环
for line in fi：

49 无限循环
while <条件>：
  <语句块>
50 循环控制保留字
break跳出并结束当前整个循环，执行循环后的语句
continue结束当次循环，继续执行后续次数循环

51 循环的扩展 循环与else
for <循环变量> in <遍历结构>
  <语句块1>
else :
  <语句块2>

while <条件>
  <语句块>
else:
  <语句块2>
当循环没有被break语句退出时,执行else语句块

51随机数函数 random库
seed(a=None) 初始化给定的随机数种子，默认为当前系统时间
可以在随机过程
random.seed(10)
random 生成一个[0.0,1.0]之间的随机小数
random.random()

52扩展随机数函数
randint（a，b） 生成一个[a,b]之间的整数
randrange(m,n,[,k]) 生成一个[m,n]之间以k为步长的随机整数
getrandbists(k) 生成一个k比特长的随机整数
uniform(a,b) 生成一个[a,b]之间的随机小数
random.choice([1,3,4,5])
shuffle(seq) 将序列seq中元素随机排列,返回打乱后的序列
choice(seq) 从序列seq中随机选取一个元素

53 代码中的换行\加enter

54蒙地卡罗方法求pi

55 函数的定义
def <函数名>(<参数（0个或多个）>):
  <函数体>
  return <返回值>

56 可选参数传递 可变参数传递
def <函数名>(a,b=1) b为可选参数
def <函数名>(<参数>,*b)

57函数调用时，参数可以按照位置或名称方式传递
def fact(n,m=1):
fact(10,5) fact(m=5,n=10)

58函数的返回值
函数可以返回0个或多个结果 用逗号分隔多个返回结果
可以由return 或 没return

59局部变量和全局变量
全局变量可能重名但不同
函数运算结束后，局部变量被释放
可以使用global保留字在函数内部使用全局变量

局部变量为组合数据类型且为创建，等同于全局变量

60lambada函数
lambda函数时一种匿名函数，即没有名字的函数
使用lambda保留字定义，函数名时返回结果
lambda函数用于定义简单的，能够一行内表示的函数
<函数名> = lambda<参数>:<表达式>

61代码复用
函数和对象时代码复用的两种主要形式
函数：将代码命名在代码层面建立了初步抽象
对象：属性和方法 <a>.<b> 和<a>.<b>() 在函数之上再次组织进行抽象

62模块化设计
紧耦合：两个部分之间交流很多，无法独立存在
松耦合：两个部分之间交流较少，可以独立存在
模块内部紧耦合、模块之间松耦合

63递归的定义
两个关键的特征
链条：计算过程存在递归链条
基例：存在一个或多个不需要再次递归的基例

64 pyinstaller 库的安装
pip install pyinstatller 可去清华大学里的镜像 pypi里找
pyinstaller -F <文件名.py>

65pyinstaller 库常用参数
-h 查看帮助
--clean 清理打包过程中的临时文件
-D，--onedir 默认值,生成dist文件夹
-F,--onefile 在dist文件中只生产独立的打包文件
-i<图标文件名.ico> 指定打包程序使用的图标(icon)文件
pyinstaller -i curve.ico -F dfd.py

66科赫雪花绘制

69 组合数据类型
集合类型 ：不能出现可变的数据类型元素
集合用大括号{}表示,元素间用逗号分隔
集合每个元素唯一,不存在相同元素
集合元素之间无序
建立集合类型用{}或set()
建立空集合类型，必须使用set()

集合间操作
产生新的集合
S|T 并
S-T差
S&T交
S^T补
更新S集合不产生新的集合
S|=T 并
S-=T差
S&=T交
S^=T补

S>=或S<T
S>=T或S>T
集合处理方法
s.add(x)
s.discard(x) 不报错
s.remove(x) 没有元素报错
s.clear() 移除所有元素
s.pop() 随机返回一个元素,更新s，若s为空产生异常
s.copy() 副本
len(s) 个数
x in s 判断在否
x not in s 判断在否
set(x) 将其他类型变量x转变为集合类型

集合类型应用场景
包含关系的比较
数据去重：集合类型所有元素无重复
s = set(ls)
lt = list(s)

70 序列类型（正向递增反向递减） 元组类型 列表类型 字符串类型
操作符
x ins s 判断x是否s序列的元素
x not in s 判断x是否s序列的元素
s + t 连接两个序列
s*n 将序列s复制n次
s[i] 索引，返回s中第i个元素
s[i:j] 或 s[i:j:k] 切片

序列通用函数
len(s) 长度
min(s) 返回最小元素，s中元素需要可比较
max(s)
s.index(x)或s.index(x,i,j) 返回第一次出现x的位置从i开始j结束
s.count(x) 返回序列s中出现x的总次数

元组是序列类型的一种扩展
元组是一种序列类型，一旦创建就不能被修改
使用小括号()或tuple创建,元素间用逗号分隔
可以使用小括号或不使用
元组继承序列类型的全部通用操作

列表类型是序列类型的一种扩展
列表是一种序列类型，创建后可以随意被修改
使用括号[]或list（）创建,元素间用逗号，分隔
可以使用小括号或不使用

列表类型操作函数和方法
ls[i] = x
ls[i:j:k] = lt
del ls[i]
del ls[i:j:k]
ls+=lt
ls*=n
ls.append(x)
ls.clear()
ls.copy()
ls.insert(i,x)
ls.pop(i)
ls.remove(x)
ls.reverse(x)

序列类型应用场景
数据保护
如果不希望数据被程序所改变,转换成元组类型
lt = tuple(ls)

71 sorted() python内置函数用来递增排序

72 字典类型
键值对：键是数据索引的扩展
字典是键值对的集合，键值对之间无序
采用大括号{}和dict()创建，键值对用冒号:表示
字典类型的用法
<字典变量> = {<键1>:<值1>,...<键n>:<值n>
<值>=<字典变量>[<键>] <字典变量>[<键>] =<值>
[]用来向字典变量中索引或增加元素

73 de={}空的字典类型 type()返回变量x的类型
集合类型不能使用{}生成空的集合

74字典类型操作函数
del d[k] 删除k键值对的数据
k in d 判断k在d中否
d.keys() 返回所有键
d.values() 返回所有值
d.items() 返回d中所有键值对
d.get(k,default) 键k存在，返回相应值,不在则返回default
d.pop(k,default)键k存在，取出相应值，不在则返回default
d.popitem() 随机从字典中取出一个键值对,以元组形式返回
d.clear() 删除所有的键值对、
len(d) 返回字典中d中元素的个数

75jieba库
pip install jieba 安装第三方库
jieba分词的三种模式
精确模式，全模式，搜索引擎模式
jieba.lcut(s) 精确模式，返回一个列表类型的分词结果
jieba.lcut(s,cut_all=True) 全局模式,存在冗余，返回一个列表类型的分词结果
jieba.lcut_for_search(s) 搜索引擎模式,返回一个列表类型的分词结果，存在冗余
jieba.add_word(w) 向分词词典增加新词w

76文件的类型
文件是数据的抽象和集合
文件是数据存储的一种形式
文件展现形态：文本文件和二进制文件

77文件的打开关闭
文件处理的步骤:打开-操作-关闭
a=open(,)
a.close()
a.read(size)
a.readline(size)
a.readlines(hint)读文件 一次读入分行处理

a.write(s)
a.writelines(lines)
a.seek(offset)写文件
<变量名> = open(<文件名>,<打开模式>)
文件名：文件路径和名称
打开方式：文本or二进制 读or写

78文件的全文本操作
txt= fo.read()一次读入，统一处理
大文件 分段读取

79数据的写入
f.write(s)
f.writelines(lines)
f.seek(offset) 改变当前文件操作指针的位置
0：文件开头 1：当前位置 2:文件结尾

80定义数据文件格式 （接口）
理解方法思维
自动化思维：数据和功能分离,数据驱动的自动运行
接口化设计：格式化设计接口，情绪明了
二位数据应用：应用维度组织数据，二位数据最常用

81.一维数据的表示
序列:有序的数据
集合:无序的数据

一维数据的存储
空格分隔：数据中不能存在空格
逗号分隔: 数据中不能由，
特殊符号: $
通用性差

一维数据的处理
存储<->表示 

82二位数据的表示
使用二位列表

csv数据存储格式
csv：由逗号分隔的值
国际通用的一二维数据存储格式，一般.csv扩展名
每行一个一维数据，采用逗号分隔，无空行
如果某个元素缺失，逗号仍要保留
二维数据的表头可以作为数据存储，也可以另行存储

二维数据的读入处理

83 wordcloud 库常规方法
w = wordcloud.WordCloud()
w.generate(txt) 向wordCloud对象w中加载文本txt
w.to_file(filename) 将词云输出为图像文件，png或jpg格式

84
from scipy.misc import imread
读取一个图片文件并且变成一个图片文件表达的内部文件

85程序设计
自顶向下 设计 ： 分而治之
自底向上 执行： 模块化集成

86python程序设计思维
逻辑思维：数学
实证思维：引力波
计算思维：汉罗塔

87API 与 计算生态
商业程序员写的 与 野性扩展

88提高用户体验
展示进度条 等待 多步骤 大量循环
异常处理  用户输入 读写文件 输入输出（除法运算0）

89程序设计模式
ipo设计
自顶向下设计
模块化设计 紧耦合 松耦合
配置化设计 数据和程序分离

90应用开发的四个步骤
产品定义：功能加商业模式
系统架构：思考产品技术实现
设计与实现：扩展与优化
用户体验：体验优先

91安装python第三方库
三种方法
pip
pip install <第三方库> 安装第三方库
pip install -U <第三方库> 更新已经安装的第三方库
pip uninstall <第三方库> 卸载指定的第三方库
pip download <第三方库> 下载不按照第三方库
pip show <第三方库> 列出详细信息
pip search <关键词> 搜索相关库
pip list 以安装的第三方库
集成安装方法
文件安装方法

92 os库
os.path 路径操作
os.system(command） 进程管理
os.chdir  环境参数
os.getcwd()

93第三方库自动安装脚本